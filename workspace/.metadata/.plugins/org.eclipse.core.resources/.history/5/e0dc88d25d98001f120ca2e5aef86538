package net.minecraft.client.render;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;

import net.minecraft.client.Minecraft;

import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.ARBShaderObjects;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL13;
import org.lwjgl.opengl.ARBVertexShader;
import org.lwjgl.opengl.ARBFragmentShader;
import org.lwjgl.opengl.ARBMultitexture;

public class Shaders {
	public static final Shaders instance = new Shaders();
	public int activeProgram = 0;
	public int baseProgram = 0;
	private int baseVShader = 0;
	private int baseFShader = 0;
	public int finalProgram = 0;
	private int finalVShader = 0;
	private int finalFShader = 0;
	private int baseTextureId = 0;
	private int baseTextureWidth = 0;
	private int baseTextureHeight = 0;
	private int depthTextureId = 0;
	private int depthTextureWidth = 0;
	private int depthTextureHeight = 0;
	private int depthTexture2Id = 0;
	private int depthTexture2Width = 0;
	private int depthTexture2Height = 0;

	private Shaders() {
		this.initShaders();
	}

	private void initShaders() {
		this.baseProgram = ARBShaderObjects.glCreateProgramObjectARB();
		if(this.baseProgram != 0) {
			this.baseVShader = this.createVertShader("shaders/base.vsh");
			this.baseFShader = this.createFragShader("shaders/base.fsh");
		}

		if(this.baseVShader != 0 && this.baseFShader != 0) {
			ARBShaderObjects.glAttachObjectARB(this.baseProgram, this.baseVShader);
			ARBShaderObjects.glAttachObjectARB(this.baseProgram, this.baseFShader);
			ARBShaderObjects.glLinkProgramARB(this.baseProgram);
			ARBShaderObjects.glValidateProgramARB(this.baseProgram);
			if(!printLogInfo(this.baseProgram)) {
				this.baseProgram = 0;
			}
		}

		this.finalProgram = ARBShaderObjects.glCreateProgramObjectARB();
		if(this.finalProgram != 0) {
			this.finalVShader = this.createVertShader("/shaders/final.vsh");
			this.finalFShader = this.createFragShader("/shaders/final.fsh");
		}

		if(this.finalVShader != 0 && this.finalFShader != 0) {
			ARBShaderObjects.glAttachObjectARB(this.finalProgram, this.finalVShader);
			ARBShaderObjects.glAttachObjectARB(this.finalProgram, this.finalFShader);
			ARBShaderObjects.glLinkProgramARB(this.finalProgram);
			ARBShaderObjects.glValidateProgramARB(this.finalProgram);
			if(!printLogInfo(this.finalProgram)) {
				this.finalProgram = 0;
			}
		}

	}

	public void useProgram(int program) {
		ARBShaderObjects.glUseProgramObjectARB(program);
		this.activeProgram = program;
		if(program != 0) {
			int sampler0U = ARBShaderObjects.glGetUniformLocationARB(program, "sampler0");
			ARBShaderObjects.glUniform1iARB(sampler0U, 0);
		}

	}

	private int createVertShader(String filename) {
		int vertShader = ARBShaderObjects.glCreateShaderObjectARB(ARBVertexShader.GL_VERTEX_SHADER_ARB);
		if(vertShader == 0) {
			return 0;
		} else {
			String vertexCode = "";

			String line;
			try {
				for(BufferedReader e = new BufferedReader(new InputStreamReader(Shaders.class.getResourceAsStream(filename))); (line = e.readLine()) != null; vertexCode = vertexCode + line + "\n") {
				}
			} catch (Exception exception6) {
				System.out.println("Failed reading vertex shading code.");
				return 0;
			}

			ARBShaderObjects.glShaderSourceARB(vertShader, vertexCode);
			ARBShaderObjects.glCompileShaderARB(vertShader);
			if(!printLogInfo(vertShader)) {
				vertShader = 0;
			}

			return vertShader;
		}
	}

	private int createFragShader(String filename) {
		int fragShader = ARBShaderObjects.glCreateShaderObjectARB(ARBFragmentShader.GL_FRAGMENT_SHADER_ARB);
		if(fragShader == 0) {
			return 0;
		} else {
			String fragCode = "";

			String line;
			try {
				for(BufferedReader e = new BufferedReader(new InputStreamReader(Shaders.class.getResourceAsStream(filename))); (line = e.readLine()) != null; fragCode = fragCode + line + "\n") {
				}
			} catch (Exception exception6) {
				System.out.println("Failed reading fragment shading code.");
				return 0;
			}

			ARBShaderObjects.glShaderSourceARB(fragShader, fragCode);
			ARBShaderObjects.glCompileShaderARB(fragShader);
			if(!printLogInfo(fragShader)) {
				fragShader = 0;
			}

			return fragShader;
		}
	}

	private static boolean printLogInfo(int obj) {
		IntBuffer iVal = BufferUtils.createIntBuffer(1);
		ARBShaderObjects.glGetObjectParameterARB(obj, ARBShaderObjects.GL_OBJECT_INFO_LOG_LENGTH_ARB, iVal);
		int length = iVal.get();
		if(length > 1) {
			ByteBuffer infoLog = BufferUtils.createByteBuffer(length);
			iVal.flip();
			ARBShaderObjects.glGetInfoLogARB(obj, iVal, infoLog);
			byte[] infoBytes = new byte[length];
			infoLog.get(infoBytes);
			String out = new String(infoBytes);
			System.out.println("Info log:\n" + out);
			return false;
		} else {
			return true;
		}
	}

	private int createTexture(int width, int height, boolean depth) {
		int textureId = GL11.glGenTextures();
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, textureId);
		ByteBuffer buffer;
		if(depth) {
			buffer = ByteBuffer.allocateDirect(width * height * 4 * 4);
			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_DEPTH_COMPONENT, width, height, 0, GL11.GL_DEPTH_COMPONENT, GL11.GL_FLOAT, buffer);
		} else {
			buffer = ByteBuffer.allocateDirect(width * height * 4);
			GL11.glTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, width, height, 0, GL11.GL_RGBA, GL11.GL_UNSIGNED_BYTE, buffer);
		}

		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MAG_FILTER, GL11.GL_LINEAR);
		GL11.glTexParameteri(GL11.GL_TEXTURE_2D, GL11.GL_TEXTURE_MIN_FILTER, GL11.GL_LINEAR);
		return textureId;
	}

	private void a(int textureId) {
		GL11.glDeleteTextures(textureId);
	}

	public int baseTextureId(Minecraft minecraft) {
		if(this.baseTextureId == 0 || this.baseTextureWidth != minecraft.displayWidth || this.baseTextureHeight != minecraft.displayHeight) {
			int textureId = this.createTexture(minecraft.displayWidth, minecraft.displayHeight, false);
			this.baseTextureId = textureId;
			this.baseTextureWidth = minecraft.displayWidth;
			this.baseTextureHeight = minecraft.displayHeight;
		}

		return this.baseTextureId;
	}

	public int depthTextureId(Minecraft minecraft) {
		if(this.depthTextureId == 0 || this.depthTextureWidth != minecraft.displayWidth || this.depthTextureHeight != minecraft.displayHeight) {
			int textureId = this.createTexture(minecraft.displayWidth, minecraft.displayHeight, true);
			this.depthTextureId = textureId;
			this.depthTextureWidth = minecraft.displayWidth;
			this.depthTextureHeight = minecraft.displayHeight;
		}

		return this.depthTextureId;
	}

	public int depthTexture2Id(Minecraft minecraft) {
		if(this.depthTexture2Id == 0 || this.depthTexture2Width != minecraft.displayWidth || this.depthTexture2Height != minecraft.displayHeight) {
			int textureId = this.createTexture(minecraft.displayWidth, minecraft.displayHeight, true);
			this.depthTexture2Id = textureId;
			this.depthTexture2Width = minecraft.displayWidth;
			this.depthTexture2Height = minecraft.displayHeight;
		}

		return this.depthTexture2Id;
	}

	public void processScene(Minecraft minecraft, float farPlaneDistance, float red, float green, float blue) {
		if(!minecraft.options.anaglyph && this.finalProgram != 0) {
			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.baseTextureId(minecraft));
			GL11.glCopyTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_RGBA, 0, 0, minecraft.displayWidth, minecraft.displayHeight, 0);
			GL13.glActiveTexture(ARBMultitexture.GL_TEXTURE1_ARB);
			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.depthTextureId(minecraft));
			GL13.glActiveTexture(ARBMultitexture.GL_TEXTURE2_ARB);
			GL11.glBindTexture(GL11.GL_TEXTURE_2D, this.depthTexture2Id(minecraft));
			GL13.glActiveTexture(ARBMultitexture.GL_TEXTURE0_ARB);
			this.useProgram(this.finalProgram);
			int sampler0U = ARBShaderObjects.glGetUniformLocationARB(this.finalProgram, "sampler0");
			ARBShaderObjects.glUniform1iARB(sampler0U, 0);
			int sampler1U = ARBShaderObjects.glGetUniformLocationARB(this.finalProgram, "sampler1");
			ARBShaderObjects.glUniform1iARB(sampler1U, 1);
			int sampler2U = ARBShaderObjects.glGetUniformLocationARB(this.finalProgram, "sampler2");
			ARBShaderObjects.glUniform1iARB(sampler2U, 2);
			int aspectRatioU = ARBShaderObjects.glGetUniformLocationARB(this.finalProgram, "aspectRatio");
			ARBShaderObjects.glUniform1fARB(aspectRatioU, (float)(minecraft.displayWidth / minecraft.displayHeight));
			int nearU = ARBShaderObjects.glGetUniformLocationARB(this.finalProgram, "near");
			ARBShaderObjects.glUniform1fARB(nearU, 0.05F);
			int farU = ARBShaderObjects.glGetUniformLocationARB(this.finalProgram, "far");
			ARBShaderObjects.glUniform1fARB(farU, farPlaneDistance);
			int fogMode = GL11.glGetInteger(GL11.GL_FOG_MODE);
			int fogModeU = ARBShaderObjects.glGetUniformLocationARB(this.finalProgram, "fogMode");
			ARBShaderObjects.glUniform1iARB(fogModeU, fogMode);
			GL11.glClearColor(red, green, blue, 0.0F);
			GL11.glClear(16384);
			GL11.glDisable(GL11.GL_DEPTH_TEST);
			GL11.glDisable(GL11.GL_BLEND);
			GL11.glMatrixMode(GL11.GL_PROJECTION);
			GL11.glLoadIdentity();
			GL11.glOrtho(0.0D, (double)minecraft.displayWidth, (double)minecraft.displayHeight, 0.0D, -1.0D, 1.0D);
			GL11.glMatrixMode(GL11.GL_MODELVIEW);
			GL11.glLoadIdentity();
			GL11.glBegin(GL11.GL_QUADS);
			GL11.glTexCoord2f(0.0F, 1.0F);
			GL11.glVertex3f(0.0F, 0.0F, 0.0F);
			GL11.glTexCoord2f(0.0F, 0.0F);
			GL11.glVertex3f(0.0F, (float)minecraft.displayHeight, 0.0F);
			GL11.glTexCoord2f(1.0F, 0.0F);
			GL11.glVertex3f((float)minecraft.displayWidth, (float)minecraft.displayHeight, 0.0F);
			GL11.glTexCoord2f(1.0F, 1.0F);
			GL11.glVertex3f((float)minecraft.displayWidth, 0.0F, 0.0F);
			GL11.glEnd();
			GL11.glEnable(GL11.GL_DEPTH_TEST);
			this.useProgram(0);
		}

	}

	public static void copyDepthTexture(int texture, Minecraft minecraft) {
		GL11.glBindTexture(GL11.GL_TEXTURE_2D, texture);
		GL11.glCopyTexImage2D(GL11.GL_TEXTURE_2D, 0, GL11.GL_DEPTH_COMPONENT, 0, 0, minecraft.displayWidth, minecraft.displayHeight, 0);
	}
}
