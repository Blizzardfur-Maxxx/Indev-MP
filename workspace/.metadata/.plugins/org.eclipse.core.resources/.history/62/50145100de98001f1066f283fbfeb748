package net.minecraft.game.entity.player;



import java.io.Serializable;

import net.minecraft.client.Session;
import net.minecraft.game.level.block.Block;

public class InventoryClassic implements Serializable {
	public static final long serialVersionUID = 0L;
	public static final int POP_TIME_DURATION = 5;
	public int[] slots = new int[9];
	public int[] count = new int[9];
	public int[] popTime = new int[9];
	public int selected = 0;

	public InventoryClassic() {
		for(int i1 = 0; i1 < 9; ++i1) {
			this.slots[i1] = -1;
			this.count[i1] = 0;
		}

	}

	public int getSelected() {
		return this.slots[this.selected];
	}

	private int containsTileAt(int index) {
		for(int i2 = 0; i2 < this.slots.length; ++i2) {
			if(index == this.slots[i2]) {
				return i2;
			}
		}

		return -1;
	}

	public void grabTexture(int id, boolean replace) {
		int i3;
		if((i3 = this.containsTileAt(id)) >= 0) {
			this.selected = i3;
		} else {
			if(replace && id > 0 && Session.registeredBlocksList.contains(Block.blocksList[id])) {
				this.replaceSlot(Block.blocksList[id]);
			}

		}
	}

	public void swapPaint(int index) {
		if(index > 0) {
			index = 1;
		}

		if(index < 0) {
			index = -1;
		}

		for(this.selected -= index; this.selected < 0; this.selected += this.slots.length) {
		}

		while(this.selected >= this.slots.length) {
			this.selected -= this.slots.length;
		}

	}

	public void replaceSlot(int id) {
		if(id >= 0) {
			this.replaceSlot((Block)Session.registeredBlocksList.get(id));
		}

	}

	public void replaceSlot(Block tile) {
		if(tile != null) {
			int i2;
			if((i2 = this.containsTileAt(tile.blockID)) >= 0) {
				this.slots[i2] = this.slots[this.selected];
			}

			this.slots[this.selected] = tile.blockID;
		}

	}

	public boolean addResource(int id) {
		int i2;
		if((i2 = this.containsTileAt(id)) < 0) {
			i2 = this.containsTileAt(-1);
		}

		if(i2 < 0) {
			return false;
		} else if(this.count[i2] >= 99) {
			return false;
		} else {
			this.slots[i2] = id;
			++this.count[i2];
			this.popTime[i2] = 5;
			return true;
		}
	}

	public void tick() {
		for(int i1 = 0; i1 < this.popTime.length; ++i1) {
			if(this.popTime[i1] > 0) {
				--this.popTime[i1];
			}
		}

	}

	public boolean removeResource(int index) {
		if((index = this.containsTileAt(index)) < 0) {
			return false;
		} else {
			if(--this.count[index] <= 0) {
				this.slots[index] = -1;
			}

			return true;
		}
	}
}